{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hatar\\\\reactProject\\\\check-weather\\\\src\\\\searchEngine.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport axios from 'axios';\nimport icons8Search from \"./image/icons8Search.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchEngine({\n  setWeather,\n  city,\n  setCity,\n  setLocalTime,\n  setForecast\n}) {\n  _s();\n  const [inputCity, setInputCity] = useState(\"\");\n  const [timezone, setTimezone] = useState();\n  const fetchForecast = useCallback(cityName => {\n    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=2b6fdad0cbd018949c50c70f72250726&units=metric`;\n    axios.get(url).then(response => {\n      const dailyForecast = processForecast(response.data.list);\n      setForecast(dailyForecast);\n    }).catch(error => {\n      console.error(\"Error fetching forecast:\", error.message);\n    });\n  }, [setForecast]);\n  const processForecast = data => {\n    let dailyData = {};\n    data.forEach(item => {\n      let date = item.dt_txt.split(\" \")[0]; // Extract only the date (YYYY-MM-DD)\n      if (!dailyData[date]) {\n        dailyData[date] = {\n          minTemp: item.main.temp_min,\n          maxTemp: item.main.temp_max,\n          icon: item.weather[0].icon\n        };\n      } else {\n        dailyData[date].minTemp = Math.min(dailyData[date].minTemp, item.main.temp_min);\n        dailyData[date].maxTemp = Math.max(dailyData[date].maxTemp, item.main.temp_max);\n      }\n    });\n    return Object.keys(dailyData).slice(0, 5).map(date => ({\n      date,\n      ...dailyData[date]\n    }));\n  };\n  const fetchWeather = useCallback(cityName => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=2b6fdad0cbd018949c50c70f72250726&units=metric`;\n    axios.get(url).then(response => {\n      setWeather({\n        temperature: response.data.main.temp,\n        icon: `http://openweathermap.org/img/wn/${response.data.weather[0].icon}@2x.png`,\n        description: response.data.weather[0].description,\n        // Add description for the weather icon\n        timezone: response.data.timezone,\n        feelsLike: response.data.main.feels_like,\n        humidity: response.data.main.humidity,\n        wind: response.data.wind.speed\n      });\n      setTimezone(response.data.timezone); // Update the timezone state\n      fetchForecast(cityName);\n      console.log(response);\n    }).catch(error => {\n      console.error(\"Error fetching weather data:\", error.message);\n    });\n  }, [setWeather, fetchForecast]);\n  useEffect(() => {\n    fetchWeather(city);\n  }, [city, fetchWeather]);\n  useEffect(() => {\n    if (timezone !== undefined) {\n      const interval = setInterval(() => {\n        const utcTime = Date.now();\n        const localTimeInMilliseconds = utcTime + timezone;\n        const localDate = new Date(localTimeInMilliseconds); // Convert to Date object\n\n        // Format the date and time\n        const options = {\n          weekday: \"long\",\n          hour: \"2-digit\",\n          minute: \"2-digit\"\n        };\n        const formattedTime = localDate.toLocaleString(\"en-US\", options);\n        setLocalTime(formattedTime); // Update the state\n      }, 1000);\n\n      // Cleanup interval on component unmount\n      return () => clearInterval(interval);\n    }\n  }, [timezone, setLocalTime]);\n  const capitalizeCity = name => name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (inputCity.trim()) {\n      const normalizedCity = capitalizeCity(inputCity);\n      setCity(normalizedCity);\n      fetchWeather(normalizedCity);\n      setInputCity(\"\");\n    } else {\n      console.error(\"City name cannot be empty.\");\n    }\n  };\n  const handleInputChange = event => {\n    setInputCity(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"searchContainer\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter a city..\",\n        value: inputCity,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: icons8Search,\n          alt: \"icons8Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 32\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchEngine, \"dDjEFQRoQ51RSGMhio+IWzZU4fY=\");\n_c = SearchEngine;\nvar _c;\n$RefreshReg$(_c, \"SearchEngine\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","icons8Search","jsxDEV","_jsxDEV","SearchEngine","setWeather","city","setCity","setLocalTime","setForecast","_s","inputCity","setInputCity","timezone","setTimezone","fetchForecast","cityName","url","get","then","response","dailyForecast","processForecast","data","list","catch","error","console","message","dailyData","forEach","item","date","dt_txt","split","minTemp","main","temp_min","maxTemp","temp_max","icon","weather","Math","min","max","Object","keys","slice","map","fetchWeather","temperature","temp","description","feelsLike","feels_like","humidity","wind","speed","log","undefined","interval","setInterval","utcTime","Date","now","localTimeInMilliseconds","localDate","options","weekday","hour","minute","formattedTime","toLocaleString","clearInterval","capitalizeCity","name","charAt","toUpperCase","toLowerCase","handleSubmit","event","preventDefault","trim","normalizedCity","handleInputChange","target","value","children","className","onSubmit","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/hatar/reactProject/check-weather/src/searchEngine.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport axios from 'axios';\r\nimport icons8Search from \"./image/icons8Search.svg\";\r\n\r\nexport default function SearchEngine({ setWeather, city, setCity, setLocalTime, setForecast }) {\r\n  const [inputCity, setInputCity] = useState(\"\");\r\n  const [timezone, setTimezone] = useState();\r\n\r\n  const fetchForecast = useCallback((cityName) => {\r\n    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=2b6fdad0cbd018949c50c70f72250726&units=metric`;\r\n\r\n    axios\r\n      .get(url)\r\n      .then((response) => {\r\n        const dailyForecast = processForecast(response.data.list);\r\n        setForecast(dailyForecast);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching forecast:\", error.message);\r\n      });\r\n  }, [setForecast]);\r\n\r\n  const processForecast = (data) => {\r\n    let dailyData = {};\r\n    data.forEach((item) => {\r\n      let date = item.dt_txt.split(\" \")[0]; // Extract only the date (YYYY-MM-DD)\r\n      if (!dailyData[date]) {\r\n        dailyData[date] = {\r\n          minTemp: item.main.temp_min,\r\n          maxTemp: item.main.temp_max,\r\n          icon: item.weather[0].icon,\r\n        };\r\n      } else {\r\n        dailyData[date].minTemp = Math.min(dailyData[date].minTemp, item.main.temp_min);\r\n        dailyData[date].maxTemp = Math.max(dailyData[date].maxTemp, item.main.temp_max);\r\n      }\r\n    });\r\n    return Object.keys(dailyData)\r\n      .slice(0, 5)\r\n      .map((date) => ({\r\n        date,\r\n        ...dailyData[date],\r\n      }));\r\n  };\r\n\r\n\r\n\r\n  const fetchWeather = useCallback((cityName) => {\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=2b6fdad0cbd018949c50c70f72250726&units=metric`;\r\n    axios\r\n      .get(url)\r\n      .then((response) => {\r\n        setWeather({\r\n          temperature: response.data.main.temp,\r\n          icon: `http://openweathermap.org/img/wn/${response.data.weather[0].icon}@2x.png`,\r\n          description: response.data.weather[0].description, // Add description for the weather icon\r\n          timezone: response.data.timezone,\r\n          feelsLike: response.data.main.feels_like,\r\n          humidity: response.data.main.humidity,\r\n          wind: response.data.wind.speed,\r\n        });\r\n        setTimezone(response.data.timezone); // Update the timezone state\r\n        fetchForecast(cityName);\r\n        console.log(response);\r\n\r\n\r\n\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching weather data:\", error.message);\r\n      });\r\n  },\r\n    [setWeather, fetchForecast]\r\n  );\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    fetchWeather(city);\r\n  }, [city, fetchWeather]);\r\n\r\n  useEffect(() => {\r\n    if (timezone !== undefined) {\r\n      const interval = setInterval(() => {\r\n        const utcTime = Date.now();\r\n        const localTimeInMilliseconds = utcTime + timezone;\r\n        const localDate = new Date(localTimeInMilliseconds); // Convert to Date object\r\n\r\n        // Format the date and time\r\n        const options = {\r\n          weekday: \"long\",\r\n          hour: \"2-digit\",\r\n          minute: \"2-digit\",\r\n        };\r\n        const formattedTime = localDate.toLocaleString(\"en-US\", options);\r\n        setLocalTime(formattedTime); // Update the state\r\n      }, 1000);\r\n\r\n      // Cleanup interval on component unmount\r\n      return () => clearInterval(interval);\r\n\r\n    }\r\n  }, [timezone, setLocalTime]);\r\n\r\n  const capitalizeCity = (name) =>\r\n    name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\r\n\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (inputCity.trim()) {\r\n      const normalizedCity = capitalizeCity(inputCity);\r\n      setCity(normalizedCity);\r\n      fetchWeather(normalizedCity);\r\n      setInputCity(\"\");\r\n    } else {\r\n      console.error(\"City name cannot be empty.\");\r\n    }\r\n\r\n\r\n\r\n  }\r\n  const handleInputChange = (event) => {\r\n    setInputCity(event.target.value);\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"searchContainer\" onSubmit={handleSubmit}>\r\n        <input type=\"text\"\r\n          placeholder=\"Enter a city..\"\r\n          value={inputCity}\r\n          onChange={handleInputChange}></input>\r\n        <button type=\"submit\"> <img src={icons8Search} alt=\"icons8Search\" /> </button>\r\n      </form>\r\n\r\n\r\n    </div>\r\n\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}