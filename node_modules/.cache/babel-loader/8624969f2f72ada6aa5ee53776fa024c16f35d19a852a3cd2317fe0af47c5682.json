{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hatar\\\\reactProject\\\\check-weather\\\\src\\\\searchEngine.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchEngine({\n  setWeather,\n  city,\n  setCity,\n  setLocalTime\n}) {\n  _s();\n  const [inputCity, setInputCity] = useState(\"\");\n  const [timezone, setTimezone] = useState();\n  const fetchWeather = useCallback(cityName => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=2b6fdad0cbd018949c50c70f72250726&units=metric`;\n    axios.get(url).then(response => {\n      setWeather({\n        temperature: response.data.main.temp,\n        icon: `http://openweathermap.org/img/wn/${response.data.weather[0].icon}@2x.png`,\n        description: response.data.weather[0].description,\n        // Add description for the weather icon\n        timezone: response.data.timezone\n      });\n      setTimezone(response.data.timezone); // Update the timezone state\n      console.log(response);\n    }).catch(error => {\n      console.error(\"Error fetching weather data:\", error.message);\n      if (error.response) {\n        console.error(\"Status:\", error.response.status);\n        console.error(\"Data:\", error.response.data);\n      }\n    });\n  }, [setWeather]);\n  useEffect(() => {\n    fetchWeather(city);\n  }, [city, fetchWeather]);\n  useEffect(() => {\n    if (timezone !== undefined) {\n      // Update the local time every second\n      const interval = setInterval(() => {\n        const utcTime = new Date();\n        const localTimeInMilliseconds = utcTime + timezone * 1000;\n        const localDate = new Date(localTimeInMilliseconds); // Convert to Date object\n\n        // Format the date and time\n        const options = {\n          weekday: \"long\",\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\"\n        };\n        const formattedTime = localDate.toLocaleString(\"en-US\", options);\n        setLocalTime(formattedTime); // Update the state\n      }, 1000);\n\n      // Cleanup interval on component unmount\n      return () => clearInterval(interval);\n    }\n  }, [timezone]);\n  const capitalizeCity = name => name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (inputCity.trim()) {\n      const normalizedCity = capitalizeCity(inputCity);\n      setCity(normalizedCity);\n      fetchWeather(normalizedCity);\n      setInputCity(\"\");\n    } else {\n      console.error(\"City name cannot be empty.\");\n    }\n  };\n  const handleInputChange = event => {\n    setInputCity(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"searchContainer\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter a city..\",\n        value: inputCity,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" \\uD83D\\uDD0E \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n_s(SearchEngine, \"JYBo4whbA4MMcQep/rogz37saUM=\");\n_c = SearchEngine;\nvar _c;\n$RefreshReg$(_c, \"SearchEngine\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","SearchEngine","setWeather","city","setCity","setLocalTime","_s","inputCity","setInputCity","timezone","setTimezone","fetchWeather","cityName","url","get","then","response","temperature","data","main","temp","icon","weather","description","console","log","catch","error","message","status","undefined","interval","setInterval","utcTime","Date","localTimeInMilliseconds","localDate","options","weekday","hour","minute","second","formattedTime","toLocaleString","clearInterval","capitalizeCity","name","charAt","toUpperCase","slice","toLowerCase","handleSubmit","event","preventDefault","trim","normalizedCity","handleInputChange","target","value","children","className","onSubmit","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hatar/reactProject/check-weather/src/searchEngine.js"],"sourcesContent":["import React , { useState,useEffect, useCallback} from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport default function SearchEngine({setWeather, city, setCity, setLocalTime}){\r\n    const [inputCity, setInputCity] = useState(\"\");\r\n    const [timezone, setTimezone] = useState();\r\n    \r\n    \r\n    const fetchWeather = useCallback((cityName) => {\r\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=2b6fdad0cbd018949c50c70f72250726&units=metric`;\r\n      axios\r\n        .get(url)\r\n        .then((response) => {\r\n             setWeather({\r\n            temperature: response.data.main.temp,\r\n            icon: `http://openweathermap.org/img/wn/${response.data.weather[0].icon}@2x.png`,\r\n            description: response.data.weather[0].description, // Add description for the weather icon\r\n            timezone: response.data.timezone,\r\n          });\r\n          setTimezone(response.data.timezone); // Update the timezone state\r\n          console.log(response);\r\n          })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching weather data:\", error.message);\r\n          if (error.response) {\r\n            console.error(\"Status:\", error.response.status);\r\n            console.error(\"Data:\", error.response.data);\r\n          }\r\n        });\r\n            },\r\n    [setWeather]\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchWeather(city);\r\n  }, [city, fetchWeather]);\r\n\r\n   useEffect(() => {\r\n    if (timezone !== undefined) {\r\n      // Update the local time every second\r\n      const interval = setInterval(() => {\r\n        const utcTime = new Date(); \r\n        const localTimeInMilliseconds = utcTime + timezone * 1000; \r\n        const localDate = new Date(localTimeInMilliseconds); // Convert to Date object\r\n\r\n        // Format the date and time\r\n        const options = {\r\n          weekday: \"long\",\r\n          hour: \"2-digit\",\r\n          minute: \"2-digit\",\r\n          second: \"2-digit\",\r\n        };\r\n        const formattedTime = localDate.toLocaleString(\"en-US\", options);\r\n        setLocalTime(formattedTime); // Update the state\r\n      }, 1000);\r\n\r\n      // Cleanup interval on component unmount\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [timezone]);\r\n\r\n const capitalizeCity = (name) =>\r\n    name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\r\n\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n         if (inputCity.trim()) {\r\n          const normalizedCity = capitalizeCity(inputCity);\r\n        setCity(normalizedCity); \r\n        fetchWeather(normalizedCity); \r\n        setInputCity(\"\"); \r\n    } else {\r\n      console.error(\"City name cannot be empty.\");\r\n    }\r\n  \r\n        \r\n\r\n    }\r\n     const handleInputChange = (event) => {\r\n         setInputCity(event.target.value);\r\n\r\n    }\r\n   \r\n\r\n    \r\n    return(\r\n        <div>\r\n            <form className=\"searchContainer\" onSubmit={handleSubmit}>\r\n                <input type=\"text\" \r\n                placeholder=\"Enter a city..\" \r\n                value={inputCity} \r\n                onChange={handleInputChange}></input>\r\n                <button type=\"submit\"> ðŸ”Ž </button>\r\n            </form>\r\n          \r\n        \r\n        </div>\r\n        \r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}